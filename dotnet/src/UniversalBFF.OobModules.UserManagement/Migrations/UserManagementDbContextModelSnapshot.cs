// <auto-generated />
using System;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace UniversalBFF.OobModules.UserManagement.Migrations
{
    [DbContext(typeof(UserManagementDbContext))]
    partial class UserManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("sec")
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UserManagement.ApiOAuthClientEntity", b =>
                {
                    b.Property<long>("ClientId")
                        .HasColumnType("bigint")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MappedSubjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("RedirectUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientId");

                    b.HasIndex("MappedSubjectId");

                    b.ToTable("ApiOAuthClients", "sec");
                });

            modelBuilder.Entity("UserManagement.CachedUserIdentityEntity", b =>
                {
                    b.Property<long>("OriginUid")
                        .HasColumnType("bigint")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.Property<string>("OriginSpecificSubjectId")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.Property<string>("CachedDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CachedEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CachedImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogonDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PermittedScopes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OriginUid", "OriginSpecificSubjectId");

                    b.ToTable("CachedUserIdentities", "sec");
                });

            modelBuilder.Entity("UserManagement.KnownUserLegitimationEntity", b =>
                {
                    b.Property<long>("OriginUid")
                        .HasColumnType("bigint")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.Property<string>("OriginSpecificSubjectId")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.Property<long>("TenantUid")
                        .HasColumnType("bigint")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.HasKey("OriginUid", "OriginSpecificSubjectId", "RoleName", "TenantUid");

                    b.HasIndex("RoleName", "TenantUid");

                    b.ToTable("KnownUserLegitimations", "sec");
                });

            modelBuilder.Entity("UserManagement.LocalCredentialEntity", b =>
                {
                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogonDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WrongPasswordCount")
                        .HasColumnType("int");

                    b.HasKey("SubjectId");

                    b.ToTable("LocalCredentials", "sec");
                });

            modelBuilder.Entity("UserManagement.OAuthProxyTargetEntity", b =>
                {
                    b.Property<long>("Uid")
                        .HasColumnType("bigint")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flow")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderConfigJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TenantUid")
                        .HasColumnType("bigint");

                    b.HasKey("Uid");

                    b.HasIndex("TenantUid");

                    b.ToTable("OAuthProxyTargets", "sec");
                });

            modelBuilder.Entity("UserManagement.RoleEntity", b =>
                {
                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.Property<long>("TenantUid")
                        .HasColumnType("bigint")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.Property<bool>("IsDefaultRoleForNewUsers")
                        .HasColumnType("bit");

                    b.Property<string>("PermittedScopes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleDescriptiveLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleName", "TenantUid");

                    b.HasIndex("TenantUid");

                    b.ToTable("Roles", "sec");
                });

            modelBuilder.Entity("UserManagement.TenantScopeEntity", b =>
                {
                    b.Property<long>("TenantUid")
                        .HasColumnType("bigint")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.Property<string>("DisplayLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermittedScopes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenantUid");

                    b.ToTable("TenantScopes", "sec");
                });

            modelBuilder.Entity("UserManagement.ApiOAuthClientEntity", b =>
                {
                    b.HasOne("UserManagement.LocalCredentialEntity", null)
                        .WithMany("OAuthClients")
                        .HasForeignKey("MappedSubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("UserManagement.CachedUserIdentityEntity", b =>
                {
                    b.HasOne("UserManagement.OAuthProxyTargetEntity", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("UserManagement.KnownUserLegitimationEntity", b =>
                {
                    b.HasOne("UserManagement.CachedUserIdentityEntity", "CachedUserIdentity")
                        .WithMany()
                        .HasForeignKey("OriginUid", "OriginSpecificSubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserManagement.RoleEntity", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleName", "TenantUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CachedUserIdentity");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserManagement.OAuthProxyTargetEntity", b =>
                {
                    b.HasOne("UserManagement.TenantScopeEntity", "TenantScope")
                        .WithMany()
                        .HasForeignKey("TenantUid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TenantScope");
                });

            modelBuilder.Entity("UserManagement.RoleEntity", b =>
                {
                    b.HasOne("UserManagement.TenantScopeEntity", "TenantScope")
                        .WithMany("Roles")
                        .HasForeignKey("TenantUid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TenantScope");
                });

            modelBuilder.Entity("UserManagement.LocalCredentialEntity", b =>
                {
                    b.Navigation("OAuthClients");
                });

            modelBuilder.Entity("UserManagement.RoleEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("UserManagement.TenantScopeEntity", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
